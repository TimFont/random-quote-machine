{"version":3,"sources":["logo.svg","components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","QuoteBox","encodeQuote","encodeURIComponent","concat","this","props","quote","author","tweetLink","react_default","a","createElement","id","className","title","role","href","target","rel","type","onClick","getNewQuote","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","url","allQuotes","fetchQuotes","bind","assertThisInitialized","fetch","method","response","json","data","setState","toConsumableArray","quotes","quotesLength","length","randomIndex","Math","floor","random","randomQuote","style","height","backgroundColor","src","logo","width","alt","QuoteBox_QuoteBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yQCEnBC,mLAEb,IAAMC,EAAcC,mBAAkB,IAAAC,OAAKC,KAAKC,MAAMC,MAAMA,MAAtB,QAAAH,OAAkCC,KAAKC,MAAMC,MAAMC,SACnFC,EAAS,8EAAAL,OAAiFF,GAChG,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,qDAC1BJ,EAAAC,EAAAC,cAAA,cAAYE,UAAU,cAClBJ,EAAAC,EAAAC,cAAA,KAAGC,GAAG,OAAOC,UAAU,QAAQT,KAAKC,MAAMC,MAAMA,OAChDG,EAAAC,EAAAC,cAAA,UAAQE,UAAU,qBAAoBJ,EAAAC,EAAAC,cAAA,QAAMC,GAAG,SAASE,MAAM,gBAAgBV,KAAKC,MAAMC,MAAMC,UAEnGE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,KAAGI,KAAK,SAASC,KAAMR,EAAWI,GAAG,cAAcC,UAAU,2BAA2BI,OAAO,SAASC,IAAI,uBAA5G,SACAT,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASN,UAAU,+BAAhC,UACAJ,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASP,GAAG,YAAYQ,QAAShB,KAAKC,MAAMgB,YAAaR,UAAU,sCAAhF,sBAbkBS,aCmEnBC,cA/DjB,SAAAA,EAAYlB,GAAM,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAMC,KACDyB,MAAQ,CACXxB,MAAO,GACPyB,IAAK,yIACLC,UAAW,MAGbR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKH,YAAcG,EAAKH,YAAYa,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KATHA,mFAahBpB,KAAKiB,oLAIkBe,MAAMhC,KAAK0B,MAAMC,IAAK,CAC3CM,OAAO,sBADHC,kBAIaA,EAASC,cAAtBC,SAENpC,KAAKqC,SAAS,SAAAX,GAAK,MAAK,CAACE,UAASP,OAAAiB,EAAA,EAAAjB,CAAOe,EAAKG,wQAK1CvC,KAAK0B,MAAME,0CACP5B,KAAK6B,qBAEPW,EAAexC,KAAK0B,MAAME,UAAUa,OACpCC,EAAcC,KAAKC,MAAOD,KAAKE,SAAWL,GAC1CM,EAAc9C,KAAK0B,MAAME,UAAUc,GACzC1C,KAAKqC,SAAU,SAAAX,GAAK,MAAK,CAACxB,MAAQ4C,wIAKlC,OACEzC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,MACVsC,MACE,CACEC,OAAO,QACPC,gBAAiB,YAGxB5C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wCACbJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,eAAeG,KAAK,KAC/BP,EAAAC,EAAAC,cAAA,OAAK2C,IAAKC,IAAMC,MAAM,KAAKJ,OAAO,KAAKvC,UAAU,2BAA2B4C,IAAI,KADlF,yBAKFhD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oCACbJ,EAAAC,EAAAC,cAAC+C,EAAD,CAAUrC,YAAajB,KAAKiB,YAAaf,MAAOF,KAAK0B,MAAMxB,kBAxDrDgB,aCOEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6d0f1341.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nexport default class QuoteBox extends Component {\r\n    render() {\r\n        const encodeQuote = encodeURIComponent(`\"${this.props.quote.quote}\" - ${this.props.quote.author}`);\r\n        const tweetLink = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeQuote}`;\r\n        return (\r\n            <div id=\"quote-box\" className=\"col-xs-12 col-md-6 align-self-center p-5 bg-light\"  >\r\n                <blockquote className=\"blockquote\">\r\n                    <p id=\"text\" className=\"mb-0\">{this.props.quote.quote}</p>\r\n                    <footer className=\"blockquote-footer\"><cite id=\"author\" title=\"Source Title\">{this.props.quote.author}</cite></footer>\r\n                </blockquote>\r\n                <div className=\"d-flex mt-5\">\r\n                    <a role=\"button\" href={tweetLink} id=\"tweet-quote\" className=\"btn btn-primary mr-2 p-2\" target=\"_blank\" rel=\"noopener noreferrer\">Tweet</a>\r\n                    <button type=\"button\" className=\"btn btn-primary mr-auto p-2\">Tumblr</button>\r\n                    <button type=\"button\" id=\"new-quote\" onClick={this.props.getNewQuote} className=\"btn btn-primary align-self-end p-2\">New quote</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport QuoteBox from './components/QuoteBox';\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quote: {},\n      url: 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json',\n      allQuotes: null\n    }\n\n    this.fetchQuotes = this.fetchQuotes.bind(this);\n    this.getNewQuote = this.getNewQuote.bind(this);\n  }\n\n  componentDidMount(){\n    this.getNewQuote();\n  }\n\n  async fetchQuotes(){\n    const response = await fetch(this.state.url, {\n      method:'get'\n    });\n\n    const data = await response.json();\n    //this.state.allQuotes = [...data.quotes];\n    this.setState(state => ({allQuotes : [...data.quotes]}));\n\n  }\n\n  async getNewQuote(){\n    if(!this.state.allQuotes){\n      await this.fetchQuotes();\n    }\n    const quotesLength = this.state.allQuotes.length\n    const randomIndex = Math.floor((Math.random() * quotesLength));\n    const randomQuote = this.state.allQuotes[randomIndex];\n    this.setState( state => ({quote : randomQuote}));\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\" \n           style={ \n             {\n               height:'100vh',\n               backgroundColor: '#334f4b'\n              } \n        }>\n        <nav className=\"navbar navbar-dark bg-dark fixed-top\">\n          <a className=\"navbar-brand\" href=\"/\">\n            <img src={logo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\n              Random Quote Machine\n          </a>\n        </nav>\n        <div className=\"container-fluid h-100\" >\n          <div className=\"row justify-content-center h-100\">\n            <QuoteBox getNewQuote={this.getNewQuote} quote={this.state.quote} />\n          </div>\n        </div>\n      </div>\n        );\n      }\n    }\n    \n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}